package api

import (
	"encoding/json"
	"fmt"
)

// HTTP_* error codes
const (
	HTTP_BAD_REQUEST      = 400
	HTTP_UNAUTHORIZED     = 401
	HTTP_FORBIDDEN        = 402
	HTTP_PAYMENT_REQUIRED = 403
	HTTP_NOT_FOUND        = 404
	HTTP_SERVER_ERROR     = 500
)

// APIError represents an error generated by the APIs
type APIError struct {
	Status  int    `json:"status"`
	Message string `json:"message"`

	Err error
}

func (a APIError) Error() string {
	return fmt.Sprintf("Error: %d - %s", a.Status, a.Message)
}

// JSON creates a json represtation of the APIError
func (a APIError) JSON() []byte {
	data, _ := json.Marshal(a)
	return data
}

// NewAPIError instantiates and APIError
func NewAPIError(status int, message string, errs ...error) *APIError {
	e := &APIError{
		Status:  status,
		Message: message,
	}
	if len(errs) > 0 {
		e.Err = errs[0]
	}

	return e
}
